apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'

group = 'com.adzerk'
version = '1.0.0-beta.11'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        // classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
}

allprojects {
    apply plugin: "maven"
    apply plugin: "maven-publish"
    // apply plugin: "com.jfrog.artifactory"
    apply plugin: "signing"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'adzerk-decision-sdk'
            from components.java
            pom {
                name = 'Adzerk Decision SDK'
                description = 'Adzerk Decision SDK'
                url = 'https://github.com/adzerk/adzerk-decision-sdk-java'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'CrshOverride'
                        name = 'Justin Niessner'
                        email = 'engineering@adzerk.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/adzerk/adzerk-decision-sdk-java.git'
                    developerConnection = 'scm:git:ssh://github.com/adzerk/adzerk-decision-sdk-java.git'
                    url = 'http://github.com/adzerk/adzerk-decision-sdk-java/'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/adzerk/adzerk-decision-sdk-java"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            pom.project {
                name 'Adzerk Decision SDK'
                packaging 'jar'
                description 'Adzerk Decision SDK'
                url 'https://github.com/adzerk/adzerk-decision-sdk-java'

                scm {
                    connection 'scm:git:git://github.com/adzerk/adzerk-decision-sdk-java.git'
                    developerConnection 'scm:git:ssh://github.com/adzerk/adzerk-decision-sdk-java.git'
                    url 'http://github.com/adzerk/adzerk-decision-sdk-java/'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'CrshOverride'
                        name 'Justin Niessner'
                        email = 'engineering@adzerk.com'
                    }
                }
            }
        }
    }
}

jar {
    manifest {
        attributes(
            "Implementation-Title": project.name,
            "Implementation-Version": project.version
        )
    }
}

// artifactory {
//     contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
//     publish {
//         repository {
//             repoKey = 'libs-release-local'
//             username = "${artifactory_user}"
//             password = "${artifactory_password}"
//             maven = true

//         }
//         defaults {
//             publications ('mavenJava')
//         }
//     }
//     resolve {
//         repository {
//             repoKey = 'libs-release'
//             username = "${artifactory_user}"
//             password = "${artifactory_password}"
//             maven = true

//         }
//     }
// }

repositories {
    jcenter()
}
sourceSets {
    main.java.srcDirs = ['src/main/java']
}

if(hasProperty('target') && target == 'android') {

    apply plugin: 'com.android.library'
    apply plugin: 'com.github.dcendents.android-maven'

    android {
        compileSdkVersion 25
        buildToolsVersion '25.0.2'
        defaultConfig {
            minSdkVersion 14
            targetSdkVersion 25
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        // Rename the aar correctly
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.aar')) {
                    def fileName = "${project.name}-${variant.baseName}-${version}.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }

        dependencies {
            provided 'javax.annotation:jsr250-api:1.0'
        }
    }

    afterEvaluate {
        android.libraryVariants.all { variant ->
            def task = project.tasks.create "jar${variant.name.capitalize()}", Jar
            task.description = "Create jar artifact for ${variant.name}"
            task.dependsOn variant.javaCompile
            task.from variant.javaCompile.destinationDir
            task.destinationDir = project.file("${project.buildDir}/outputs/jar")
            task.archiveName = "${project.name}-${variant.baseName}-${version}.jar"
            artifacts.add('archives', task);
        }
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    artifacts {
        archives sourcesJar
    }

} else {

    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    install {
        repositories.mavenInstaller {
            pom.artifactId = 'adzerk-decision-sdk'
        }
    }

    task execute(type:JavaExec) {
       main = System.getProperty('mainClass')
       classpath = sourceSets.main.runtimeClasspath
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }
}

dependencies {
    compile 'io.swagger:swagger-annotations:1.5.22'
    compile "com.google.code.findbugs:jsr305:3.0.2"
    compile 'com.squareup.okhttp3:okhttp:3.14.2'
    compile 'com.squareup.okhttp3:logging-interceptor:3.14.2'
    compile 'com.google.code.gson:gson:2.10'
    compile 'io.gsonfire:gson-fire:1.8.3'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile 'org.threeten:threetenbp:1.4.0'
    compile 'org.slf4j:slf4j-api:1.7.29'
    testCompile 'junit:junit:4.12'
}

javadoc {
    options.tags = [ "http.response.details:a:Http Response Details" ]
}

signing {
    sign configurations.archives
}
