apply plugin: 'eclipse'
apply plugin: 'java'

buildscript {
    repositories {
        mavenCentral()
    }
}

allprojects {
    apply plugin: "maven-publish"
    apply plugin: "signing"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifactId = 'adzerk-decision-sdk'
            group = 'com.adzerk'
            version = '1.0.0-beta.14'

            pom {
                name = 'Adzerk Decision SDK'
                description = 'Adzerk Decision SDK'
                url = 'https://github.com/adzerk/adzerk-decision-sdk-java'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'CrshOverride'
                        name = 'Justin Niessner'
                        email = 'engineering@adzerk.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/adzerk/adzerk-decision-sdk-java.git'
                    developerConnection = 'scm:git:ssh://github.com/adzerk/adzerk-decision-sdk-java.git'
                    url = 'http://github.com/adzerk/adzerk-decision-sdk-java/'
                }
            }

            signing {
                sign publishing.publications.mavenJava
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/adzerk/adzerk-decision-sdk-java"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
        maven {
            name = "sonatype"
            url = uri(version.endsWith("SNAPSHOT")
                ? "https://oss.sonatype.org/content/repositories/snapshots/"
                : "https://oss.sonatype.org/service/local/staging/deploy/maven2/")

            credentials {
                username = System.getenv("NEXUS_USERNAME") ?: findProperty("nexusUsername")
                password = System.getenv("NEXUS_PASSWORD") ?: findProperty("nexusPassword")
            }
        }
    }
}

jar {
    manifest {
        attributes(
            "Implementation-Title": project.name,
            "Implementation-Version": project.version
        )
    }
}

repositories {
    mavenCentral()
}
sourceSets {
    main.java.srcDirs = ['src/main/java']
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

task execute(type:JavaExec) {
   main = System.getProperty('mainClass')
   classpath = sourceSets.main.runtimeClasspath
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

dependencies {
    implementation 'io.swagger:swagger-annotations:1.5.22'
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation 'com.squareup.okhttp3:okhttp:3.14.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.14.2'
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'io.gsonfire:gson-fire:1.8.3'
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'org.threeten:threetenbp:1.4.0'
    implementation 'org.slf4j:slf4j-api:1.7.29'
    testImplementation 'junit:junit:4.12'
}

javadoc {
    options.tags = [ "http.response.details:a:Http Response Details" ]
}
